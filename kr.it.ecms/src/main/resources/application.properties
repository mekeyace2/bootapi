spring.application.name=kr.it.ecms

#Server
server.port=9000
server.servlet.encoding.charset=utf-8
server.servlet.encoding.force-response=true
server.servlet.encoding.enabled=true
spring.devtools.restart.enabled=true
server.servlet.jsp.init-parameters.development=true
#session셋팅 : 1800 = 30분
server.servlet.session.timeout=60m

#File
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=100MB

spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp

#Thymeleaf
spring.thymeleaf.cache=false
#templates 디렉토리가 있는지 확인하는 구문 
spring.thymeleaf.check-template-location=true

spring.thymeleaf.enabled=true
spring.thymeleaf.prefix=classpath:/templates
spring.thymeleaf.suffix=.jsp
spring.thymeleaf.mode=html
spring.thymeleaf.view-names=/*

#Database (Connection, Mybatis, JPA)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://210.178.108.186:3306/leejonghyuk
spring.datasource.username=leejonghyuk
spring.datasource.password=leea1234

#Mybatis
mybatis.type-aliases-package=kr.it.ecms
mybatis.mapper-locations=classpath:/mapper/*.xml
#null
mybatis.configuration.jdbc-type-for-null=CLOB
#자료형 및 컬럼을 매칭(map) => 컬럼명을 대소문자 구별없이 설정
mybatis.configuration.map-underscore-to-camel-case=true

#JPA
#콘솔에 SQL 쿼리 정보를 출력
spring.jpa.show-sql=true

#hibernate 통해서 JPA 엔티티와 데이터베이스 스키마 동기화
#create : 프로세서를 시작할 때마다 데이터베이스를 삭제하고 다시 생성하는 역활
#update : 변경된 내용을 확인 후 스키마를 업데이터 합니다. (기존 테이블 삭제하지 않음)
#validate : 데이터베이스 스키마의 일치 여부를 체크 하는 사항 및 오류체크
#none : 데이터베이스 스키마의 자동수행을 하지 않음
spring.jpa.hibernate.ddl-auto=none
#jpa을 사용하지 위한 Database를 선정
spring.jpa.database=mysql

#jpa에서 사용하고 하는 Database 드라이브
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#DDL문을 생성하여 DB적용함 (DTO)
spring.jpa.generate-ddl=true

#SQL 쿼리문을 이쁘게 보여주여 주게함
spring.jpa.properties.hibernate.format_sql=true


#hibernate logging
#info 정보를 출력 (연결여부, 쿼리의 결과값)
logging.level.org.hibernate=info

#jpa에서 쿼리문 문제가 발생시 오류나는 사항에 대해서만 체크
#logging.level.org.hibernate.SQL=debug













